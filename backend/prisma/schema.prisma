// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           BigInt              @id @default(autoincrement())
  username                     String              @unique @db.VarChar(255)
  email                        String              @unique @db.VarChar(255)
  password_hash                String              @db.VarChar(255)
  full_name                    String              @db.VarChar(255)
  work_history                 String?              @db.Text
  skills                       String?              @db.Text
  profile_photo_path           String?              @db.VarChar(255)
  created_at                   DateTime            @default(now()) @db.Timestamptz
  updated_at                   DateTime            @default(now()) @db.Timestamptz
  feeds                        Feed[]
  sent_chats                   Chat[]              @relation("SentChats")
  received_chats               Chat[]              @relation("ReceivedChats")
  sent_connection_requests     ConnectionRequest[] @relation("SentConnectionRequests")
  received_connection_requests ConnectionRequest[] @relation("ReceivedConnectionRequests")
  sent_connections             Connection[]        @relation("SentConnections")
  received_connections         Connection[]        @relation("ReceivedConnections")
  push_subscriptions           PushSubscription[]
}

model Feed {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @default(now()) @db.Timestamptz
  content    String   @db.Text
  user_id    BigInt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Chat {
  id        BigInt   @id @default(autoincrement())
  timestamp DateTime @default(now()) @db.Timestamptz
  from_id   BigInt
  to_id     BigInt
  message   String   @db.Text
  from_user User     @relation("SentChats", fields: [from_id], references: [id], onDelete: Cascade)
  to_user   User     @relation("ReceivedChats", fields: [to_id], references: [id], onDelete: Cascade)
}

model ConnectionRequest {
  from_id    BigInt
  to_id      BigInt
  created_at DateTime @db.Timestamptz
  from_user  User     @relation("SentConnectionRequests", fields: [from_id], references: [id], onDelete: Cascade)
  to_user    User     @relation("ReceivedConnectionRequests", fields: [to_id], references: [id], onDelete: Cascade)

  @@id([from_id, to_id])
}

model Connection {
  from_id    BigInt
  to_id      BigInt
  created_at DateTime @db.Timestamptz
  from_user  User     @relation("SentConnections", fields: [from_id], references: [id], onDelete: Cascade)
  to_user    User     @relation("ReceivedConnections", fields: [to_id], references: [id], onDelete: Cascade)

  @@id([from_id, to_id])
}

model PushSubscription {
  endpoint   String   @id @db.Text
  user_id    BigInt?
  keys       Json
  created_at DateTime @default(now()) @db.Timestamptz
  user       User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
}
